{
    "name": "Gardena Smart Proxy",
    "type": "com.fibaro.deviceController",
    "apiVersion": "1.3",
    "initialProperties": {
        "viewLayout": {
            "$jason": {
                "body": {
                    "header": {
                        "style": {
                            "height": "0"
                        },
                        "title": "gardena_smart_proxy"
                    },
                    "sections": {
                        "items": [
                            {
                                "components": [
                                    {
                                        "name": "label_1",
                                        "style": {
                                            "weight": "1.2"
                                        },
                                        "text": "Gardena Smart integration",
                                        "type": "label",
                                        "visible": true
                                    },
                                    {
                                        "style": {
                                            "weight": "0.5"
                                        },
                                        "type": "space"
                                    }
                                ],
                                "style": {
                                    "weight": "1.2"
                                },
                                "type": "vertical"
                            },
                            {
                                "components": [
                                    {
                                        "name": "selectLocation",
                                        "options": [],
                                        "selectionType": "single",
                                        "style": {
                                            "weight": "1.2"
                                        },
                                        "text": "Select location",
                                        "type": "select",
                                        "values": [],
                                        "visible": true
                                    },
                                    {
                                        "style": {
                                            "weight": "0.5"
                                        },
                                        "type": "space"
                                    }
                                ],
                                "style": {
                                    "weight": "1.2"
                                },
                                "type": "vertical"
                            },
                            {
                                "components": [
                                    {
                                        "name": "label_2",
                                        "style": {
                                            "weight": "1.2"
                                        },
                                        "text": "",
                                        "type": "label",
                                        "visible": true
                                    },
                                    {
                                        "style": {
                                            "weight": "0.5"
                                        },
                                        "type": "space"
                                    }
                                ],
                                "style": {
                                    "weight": "1.2"
                                },
                                "type": "vertical"
                            },
                            {
                                "components": [
                                    {
                                        "components": [
                                            {
                                                "name": "button_1",
                                                "style": {
                                                    "weight": "0.50"
                                                },
                                                "text": "Pull devices",
                                                "type": "button",
                                                "visible": true
                                            },
                                            {
                                                "name": "button_2",
                                                "style": {
                                                    "weight": "0.50"
                                                },
                                                "text": "Remove location",
                                                "type": "button",
                                                "visible": false
                                            }
                                        ],
                                        "style": {
                                            "weight": "1.2"
                                        },
                                        "type": "horizontal"
                                    },
                                    {
                                        "style": {
                                            "weight": "0.5"
                                        },
                                        "type": "space"
                                    }
                                ],
                                "style": {
                                    "weight": "1.2"
                                },
                                "type": "vertical"
                            },
                            {
                                "components": [
                                    {
                                        "name": "label_3",
                                        "style": {
                                            "weight": "1.2"
                                        },
                                        "text": "",
                                        "type": "label",
                                        "visible": true
                                    },
                                    {
                                        "style": {
                                            "weight": "0.5"
                                        },
                                        "type": "space"
                                    }
                                ],
                                "style": {
                                    "weight": "1.2"
                                },
                                "type": "vertical"
                            },
                            {
                                "components": [
                                    {
                                        "name": "status",
                                        "style": {
                                            "weight": "1.2"
                                        },
                                        "text": "Status",
                                        "type": "label",
                                        "visible": true
                                    },
                                    {
                                        "style": {
                                            "weight": "0.5"
                                        },
                                        "type": "space"
                                    }
                                ],
                                "style": {
                                    "weight": "1.2"
                                },
                                "type": "vertical"
                            }
                        ]
                    }
                },
                "head": {
                    "title": "gardena_smart_proxy"
                }
            }
        },
        "uiView": [
            {
                "components": [
                    {
                        "name": "label_1",
                        "style": {
                            "weight": "1.0"
                        },
                        "text": "Gardena Smart integration",
                        "type": "label",
                        "visible": true
                    }
                ],
                "style": {
                    "weight": "1.0"
                },
                "type": "horizontal"
            },
            {
                "components": [
                    {
                        "eventBinding": {
                            "onToggled": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onToggled",
                                            "selectLocation",
                                            "$event.value"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ]
                        },
                        "name": "selectLocation",
                        "options": [],
                        "selectionType": "single",
                        "style": {
                            "weight": "1.0"
                        },
                        "text": "Select location",
                        "type": "select",
                        "values": [],
                        "visible": true
                    }
                ],
                "style": {
                    "weight": "1.0"
                },
                "type": "horizontal"
            },
            {
                "components": [
                    {
                        "name": "label_2",
                        "style": {
                            "weight": "1.0"
                        },
                        "text": "",
                        "type": "label",
                        "visible": true
                    }
                ],
                "style": {
                    "weight": "1.0"
                },
                "type": "horizontal"
            },
            {
                "components": [
                    {
                        "eventBinding": {
                            "onLongPressDown": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onLongPressDown",
                                            "button_1"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ],
                            "onLongPressReleased": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onLongPressReleased",
                                            "button_1"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ],
                            "onReleased": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onReleased",
                                            "button_1"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ]
                        },
                        "name": "button_1",
                        "style": {
                            "weight": "0.50"
                        },
                        "text": "Pull devices",
                        "type": "button",
                        "visible": true
                    },
                    {
                        "eventBinding": {
                            "onLongPressDown": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onLongPressDown",
                                            "button_2"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ],
                            "onLongPressReleased": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onLongPressReleased",
                                            "button_2"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ],
                            "onReleased": [
                                {
                                    "params": {
                                        "actionName": "UIAction",
                                        "args": [
                                            "onReleased",
                                            "button_2"
                                        ]
                                    },
                                    "type": "deviceAction"
                                }
                            ]
                        },
                        "name": "button_2",
                        "style": {
                            "weight": "0.50"
                        },
                        "text": "Remove location",
                        "type": "button",
                        "visible": false
                    }
                ],
                "style": {
                    "weight": "1.0"
                },
                "type": "horizontal"
            },
            {
                "components": [
                    {
                        "name": "label_3",
                        "style": {
                            "weight": "1.0"
                        },
                        "text": "",
                        "type": "label",
                        "visible": true
                    }
                ],
                "style": {
                    "weight": "1.0"
                },
                "type": "horizontal"
            },
            {
                "components": [
                    {
                        "name": "status",
                        "style": {
                            "weight": "1.0"
                        },
                        "text": "Status",
                        "type": "label",
                        "visible": true
                    }
                ],
                "style": {
                    "weight": "1.0"
                },
                "type": "horizontal"
            }
        ],
        "useUiView": true,
        "uiCallbacks": [
            {
                "callback": "onSelectLocation",
                "eventType": "onToggled",
                "name": "selectLocation"
            },
            {
                "callback": "onPullDevices",
                "eventType": "onReleased",
                "name": "button_1"
            },
            {
                "callback": "",
                "eventType": "onLongPressDown",
                "name": "button_1"
            },
            {
                "callback": "",
                "eventType": "onLongPressReleased",
                "name": "button_1"
            },
            {
                "callback": "onRemoveLocation",
                "eventType": "onReleased",
                "name": "button_2"
            },
            {
                "callback": "",
                "eventType": "onLongPressDown",
                "name": "button_2"
            },
            {
                "callback": "",
                "eventType": "onLongPressReleased",
                "name": "button_2"
            }
        ],
        "quickAppVariables": [
            {
                "name": "URL",
                "type": "string",
                "value": ""
            },
            {
                "name": "Username",
                "type": "string",
                "value": ""
            },
            {
                "name": "Password",
                "type": "password",
                "value": ""
            }
        ],
        "typeTemplateInitialized": true,
        "userDescription": ""
    },
    "initialInterfaces": [],
    "files": [
        {
            "name": "main",
            "isMain": true,
            "isOpen": false,
            "content": "--[[\nGardena Smart Proxy integration\n@author ikubicki\n@version 1.1.0\n]]\n\nfunction QuickApp:onInit()\n    QuickApp:trace(\"Gardena Smart Proxy integration, v.1.1.0\")\n    self.config = Config:new(self)\n    self.client = Gardena:new(self.config)\n    QuickApp.i18n = i18n:new(api.get(\"/settings/info\").defaultLanguage)\n    QuickApp.builder = DeviceBuilder:new(self)\n    QuickApp.builder:initChildren({\n        [GardenaChildDevice.class] = GardenaChildDevice,\n        [GardenaSoilTemperature.class] = GardenaSoilTemperature,\n        [GardenaSoilHumidity.class] = GardenaSoilHumidity,\n        [GardenaValve.class] = GardenaValve,\n    })\n    self:updateUI()\n    self:updateWebhooks()\n    self:checkOrphans()\n    self:run()\nend\n\nfunction QuickApp:updateUI()\n    if self.config:getUrl() then\n        local callback = function(data)\n            local opts = {}\n            for _, location in ipairs(data) do\n                table.insert(opts, {\n                    text = location.name, \n                    type = 'option',\n                    value = location.id,\n                })\n            end\n            self:updateView(\"selectLocation\", \"options\", opts)\n            self:updateView(\"selectLocation\", \"selectedItem\", self.config:getLocationId())\n        end\n        local fallback = function(response)\n            self:updateView(\"status\", \"text\", string.format(self.i18n:get('error-locations'), response.status, response.data))\n        end\n        self.client:getLocations(callback, fallback)\n    end\n    self:updateView(\"selectLocation\", \"text\", self.i18n:get('select-location'))\n    self:updateView(\"button_1\", \"text\", self.i18n:get('pull-devices'))\n    self:updateView(\"button_2\", \"text\", self.i18n:get('remove-location'))\n    self:updateView(\"button_1\", \"visible\", false)\n    self:updateView(\"button_2\", \"visible\", false)\n    if self.config:getLocationId() ~= \"\" then\n        self:updateView(\"button_1\", \"visible\", true)\n        self:updateView(\"button_2\", \"visible\", true)\n    end\n    if self.config:getUrl() ~= \"\" then\n        self:updateView(\"status\", \"text\", string.format(self.i18n:get('used-url'), self.config:getUrl()))\n    else\n        self:updateView(\"status\", \"text\", self.i18n:get('no-setup'))\n    end\nend\n\nfunction QuickApp:onSelectLocation(event)\n    self.config:setLocationId(event.values[1])\n    self:updateUI()\nend\n\nfunction QuickApp:onRemoveLocation(event)\n    self.config:setLocationId(\"\")\n    self:updateUI()\n\n    for id in pairs(self.childDevices) do\n        api.delete('/devices/' .. id)\n    end\nend\n\nfunction QuickApp:onPullDevices(event)\n    self:updateView(\"button_1\", \"text\", self.i18n:get('pulling-devices'))\n    local callback = function(data)\n        self:updateView(\"button_1\", \"text\", self.i18n:get('pull-devices'))\n        self:updateView(\"status\", \"text\", string.format(self.i18n:get('devices-count'), #data))\n        for _, device in ipairs(data) do\n            -- QuickApp:debug(json.encode(device))\n            self:createChild(device)\n        end\n    end\n    local fallback = function(response)\n        self:updateView(\"button_1\", \"text\", self.i18n:get('pull-devices'))\n        self:updateView(\"status\", \"text\", string.format(self.i18n:get('error-devices'), response.status, response.data))\n    end\n    self.client:getDevices(self.config:getLocationId(), callback, fallback)\nend\n\nfunction QuickApp:run()\n    self:pullDevicesUpdates()\n    if (self.config:getInterval() > 0) then\n        fibaro.setTimeout(self.config:getInterval(), function() self:run() end)\n    end\nend\n\nfunction QuickApp:updateWebhooks()\n    -- remove this\n    if false then\n    self:updateWebhook()\n    fibaro.setTimeout(10800000, function() self:updateWebhooks() end)\n    end\nend\n\nfunction QuickApp:updateWebhook()\n    if self.config:getUrl() == \"\" or self.config:getLocationId() == \"\" then\n        return\n    end\n    local fallback = function(response)\n        self:updateView(\"status\", \"text\", string.format(self.i18n:get('error-webhook'), response.status, response.data))\n    end\n    local callback = function(data)\n        QuickApp:debug(json.encode(data))\n    end\n    self.client:updateWebhook(self.config:getLocationId(), callback, fallback)\nend\n\nfunction QuickApp:pullDevicesUpdates()\n    if self.config:getUrl() == \"\" or self.config:getLocationId() == \"\" then\n        return\n    end\n    -- QuickApp:debug('Pulling updates')\n    local fallback = function(response)\n        QuickApp:error(string.format(self.i18n:get('error-updates'), response.status, response.data))\n        self:updateView(\"status\", \"text\", string.format(self.i18n:get('error-updates'), response.status, response.data))\n    end\n    local callback = function(data)\n        local timestamp = 0\n        if #data < 1 then\n            return\n        end\n        for _, d in ipairs(data) do\n            self:updateChild(d)\n            if d.timestamp > timestamp then\n                timestamp = d.timestamp\n            end\n        end\n        self:updateView(\"status\", \"text\", string.format(self.i18n:get('updates-count'), os.date(\"%Y-%m-%d %H:%M:%S\", timestamp), #data))\n        if timestamp > 0 then\n            self.config:setLastUpdateAt(timestamp)\n        end\n    end\n    self.client:getUpdates(self.config:getLastUpdateAt(), callback, fallback)\n    -- self.client:getUpdates(0, callback, fallback)\nend\n\n\nfunction QuickApp:createChild(device)\n    local callbacks = {\n        Valve = function(d) \n            if d.state == GardenaValve.UNAVAILABLE then\n                GardenaValve:delete('valve-' .. d.id)\n                return\n            end\n            GardenaValve:create('valve-' .. d.id, d.name):update({\n                value = d.value ~= GardenaValve.CLOSED,\n                dead = d.state ~= GardenaValve.OK,\n            })\n        end,\n        SoilHumidity = function(d) \n            GardenaSoilHumidity:create('humid-' .. d.id, self.i18n:get('soil-humidity')):update({\n                value = d.value,\n                unit = '%',\n                dead = d.state ~= GardenaSoilHumidity.ONLINE,\n                batteryLevel = d.battery,\n            })\n        end,\n        SoilTemperature = function(d) \n            GardenaSoilTemperature:create('temp-' .. d.id, self.i18n:get('soil-temperature')):update({\n                value = d.value,\n                unit = 'C',\n                dead = d.state ~= GardenaSoilTemperature.ONLINE,\n                batteryLevel = d.battery,\n            })\n        end,\n    }\n    callbacks[device.type](device)\nend\n\nfunction QuickApp:updateChild(device)\n    local callbacks = {\n        Valve = function(d) \n            if d.state == GardenaValve.UNAVAILABLE then\n                GardenaValve:delete('valve-' .. d.id)\n                return\n            end\n            GardenaValve:get('valve-' .. d.id, d.name):update({\n                value = d.value ~= GardenaValve.CLOSED,\n                dead = d.state ~= GardenaValve.OK,\n            })\n        end,\n        SoilHumidity = function(d) \n            GardenaSoilHumidity:get('humid-' .. d.id, self.i18n:get('soil-humidity')):update({\n                value = d.value,\n                unit = '%',\n                dead = d.state ~= GardenaSoilHumidity.ONLINE,\n                batteryLevel = d.battery,\n            })\n        end,\n        SoilTemperature = function(d) \n            GardenaSoilTemperature:get('temp-' .. d.id, self.i18n:get('soil-temperature')):update({\n                value = d.value,\n                unit = 'C',\n                dead = d.state ~= GardenaSoilTemperature.ONLINE,\n                batteryLevel = d.battery,\n            })\n        end,\n    }\n    callbacks[device.type](device)\nend\n\nfunction QuickApp:checkOrphans()\n    self:_checkOrphans()\n    fibaro.setTimeout(86400000, function() self:checkOrphans() end)\nend\n\nfunction QuickApp:_checkOrphans()\n    for id in pairs(self.childDevices) do\n        local child = api.get('/devices/' .. id)\n        local diff = os.time(os.date(\"*t\")) - math.max(child.modified, child.created)\n        if diff > 604800 then -- 7 days\n            api.put('/devices/' .. id, {\n                properties = {\n                    dead = true\n                }\n            })\n        end\n    end\nend"
        },
        {
            "name": "Config",
            "isMain": false,
            "isOpen": false,
            "content": "--[[\nConfiguration handler\n@author ikubicki\n]]\nclass 'Config'\n\nfunction Config:new(app)\n    self.app = app\n    self:init()\n    return self\nend\n\nfunction Config:getUrl()\n    return self.url\nend\n\nfunction Config:getUsername()\n    return self.username\nend\n\nfunction Config:getPassword()\n    return self.password\nend\n\nfunction Config:getInterval()\n    return tonumber(self.interval) * 1000\nend\n\nfunction Config:getLocationId()\n    return self.locationId\nend\n\nfunction Config:setLocationId(locationId)\n    self.locationId = locationId\n    self.app:setVariable(\"LocationId\", locationId)\nend\n\nfunction Config:getLastUpdateAt()\n    return self.lastUpdateAt\nend\n\nfunction Config:setLastUpdateAt(updateAt)\n    self.lastUpdateAt = updateAt\n    self.app:setVariable(\"LastUpdateAt\", updateAt)\nend\n\n--[[\nThis function takes variables and sets as global variables if those are not set already.\nThis way, adding other devices might be optional and leaves option for users, \nwhat they want to add into HC3 virtual devices.\n]]\nfunction Config:init()\n    self.url = self.app:getVariable('URL')\n    self.username = self.app:getVariable('Username')\n    self.password = tostring(self.app:getVariable('Password'))\n    self.locationId = self.app:getVariable('LocationId')\n    self.interval = self.app:getVariable('Interval')\n    if self.interval == \"\" or self.interval == nil then\n        self.interval = 10\n        self.app:setVariable('Interval', string.format('%d', self.interval))\n    end\n    self.lastUpdateAt = self.app:getVariable('LastUpdateAt')\nend\n"
        },
        {
            "name": "HTTPClient",
            "isMain": false,
            "isOpen": false,
            "content": "--[[\nHTTPClient wrapper\n@author ikubicki\n]]\nclass 'HTTPClient'\n\nfunction HTTPClient:new(options)\n    if not options then\n        options = {}\n    end\n    self.options = options\n    return self\nend\n\nfunction HTTPClient:get(url, success, error, headers)\n    local client = net.HTTPClient({timeout = 10000})\n    if not headers then\n        headers = {}\n    end\n    client:request(self:url(url), self:requestOptions(success, error, 'GET', nil, headers)) \nend\n\nfunction HTTPClient:post(url, data, success, error, headers)\n    local client = net.HTTPClient({timeout = 10000})\n    if not headers then\n        headers = {}\n    end\n    QuickApp:debug(self:url(url))\n    QuickApp:debug(json.encode(data))\n    QuickApp:debug(json.encode(headers))\n    client:request(self:url(url), self:requestOptions(success, error, 'POST', data, headers)) \nend\n\nfunction HTTPClient:postForm(url, data, success, error, headers)\n    local client = net.HTTPClient({timeout = 10000})\n    if not headers then\n        headers = {}\n    end\n    headers[\"Content-Type\"] = 'application/x-www-form-urlencoded;charset=UTF-8'\n    client:request(self:url(url), self:requestOptions(success, error, 'POST', data, headers, true)) \nend\n\nfunction HTTPClient:put(url, data, success, error, headers)\n    local client = net.HTTPClient({timeout = 10000})\n    client:request(self:url(url), self:requestOptions(success, error, 'PUT', data, headers)) \nend\n\nfunction HTTPClient:delete(url, success, error, headers)\n    local client = net.HTTPClient({timeout = 10000})\n    if not headers then\n        headers = {}\n    end\n    client:request(self:url(url), self:requestOptions(success, error, 'DELETE', nil, headers)) \nend\n\nfunction HTTPClient:url(url)\n    if (string.sub(url, 0, 4) == 'http') then\n        return url\n    end\n    if not self.options.baseUrl then\n        self.options.baseUrl = 'http://localhost'\n    end\n    return self.options.baseUrl .. tostring(url)\nend\n\nfunction HTTPClient:requestOptions(success, error, method, data, headers, isFormData)\n    if error == nil then\n        error = function (error)\n            QuickApp:error(json.encode(error))\n        end\n    end\n    if method == nil then\n        method = 'GET'\n    end\n    local options = {\n        checkCertificate = false,\n        method = method,\n        headers = headers,\n    }\n    if data ~= nil then\n        if isFormData then\n            options.data = ''\n            for key, value in pairs(data) do\n                if string.len(options.data) > 0 then \n                    options.data = options.data .. '&'\n                end\n                options.data = options.data .. key .. '=' .. value\n            end\n        elseif type(data) == 'string' then\n            options.data = data\n        else\n            options.data = json.encode(data)\n        end\n    end\n    return {\n        options = options,\n        success = success,\n        error = error\n    }\nend"
        },
        {
            "name": "i18n",
            "isMain": false,
            "isOpen": false,
            "content": "--[[\nInternationalization tool\n@author ikubicki\n]]\nclass 'i18n'\n\nfunction i18n:new(langCode)\n    self.phrases = phrases[langCode]\n    return self\nend\n\nfunction i18n:get(key)\n    if self.phrases[key] then\n        return self.phrases[key]\n    end\n    return key\nend\n\nphrases = {\n    pl = {\n        ['pull-devices'] = 'Pobierz urządzenia',\n        ['pulling-devices'] = 'Pobieranie...',\n        ['remove-location'] = 'Usuń lokalizację',\n        ['select-location'] = 'Wybierze lokalizację',\n        ['device-updated'] = 'Urządzenie %s zostało zaktualizowane',\n        ['soil-humidity'] = 'Wilgotnosc gleby',\n        ['soil-temperature'] = 'Temperatura gleby',\n        ['error-locations'] = '[%d] Nie można było pobrać lokalizacji: %s',\n        ['error-devices'] = '[%d] Nie można było pobrać urządzeń: %s',\n        ['error-updates'] = '[%d] Nie można było pobrać aktualizacji: %s',\n        ['error-webhook'] = '[%d] Nie można było zaktualizować webhooka: %s',\n        ['devices-count'] = 'Wykryto %s urządzeń',\n        ['updates-count'] = '%s ... Zostanie zastosowanych %d aktualizacji',\n        ['no-setup'] = 'W celu uruchomienia integracji proszę o określenie zmiennych URL, Username oraz Password',\n        ['used-url'] = 'Adres proxy Gardena Smart: %s',\n        ['error-updates'] = '[%d] Nie można pobrać aktualizacji: %s',\n        ['error-search'] = '[%d] Nie można wyszukać urządzeń: %s',\n    },\n    en = {\n        ['pull-devices'] = 'Fetch devices',\n        ['pulling-devices'] = 'Fetching...',\n        ['remove-location'] = 'Remove location',\n        ['select-location'] = 'Select location',\n        ['device-updated'] = 'Device %s has been updated',\n        ['soil-humidity'] = 'Soil humidity',\n        ['soil-temperature'] = 'Soil temperature',\n        ['error-locations'] = '[%d] Failed to fetch locations: %s',\n        ['error-devices'] = '[%d] Failed to fetch devices: %s',\n        ['error-updates'] = '[%d] Failed to fetch updates: %s',\n        ['error-webhook'] = '[%d] Failed to update webhook: %s',\n        ['devices-count'] = '%s devices detected',\n        ['updates-count'] = '%s ... %d updates will be applied',\n        ['no-setup'] = 'To start the integration, please specify URL, Username, and Password variables',\n        ['used-url'] = 'Gardena Smart proxy address: %s',\n        ['error-updates'] = '[%d] Failed to fetch updates: %s',\n        ['error-search'] = '[%d] Failed to search for devices: %s',\n    },\n    de = {\n        ['pull-devices'] = 'Geräte abrufen',\n        ['pulling-devices'] = 'Abrufen...',\n        ['remove-location'] = 'Standort entfernen',\n        ['select-location'] = 'Standort auswählen',\n        ['device-updated'] = 'Gerät %s wurde aktualisiert',\n        ['soil-humidity'] = 'Bodenfeuchtigkeit',\n        ['soil-temperature'] = 'Bodentemperatur',\n        ['error-locations'] = '[%d] Standorte konnten nicht abgerufen werden: %s',\n        ['error-devices'] = '[%d] Geräte konnten nicht abgerufen werden: %s',\n        ['error-updates'] = '[%d] Updates konnten nicht abgerufen werden: %s',\n        ['error-webhook'] = '[%d] Webhook konnte nicht aktualisiert werden: %s',\n        ['devices-count'] = '%s Geräte erkannt',\n        ['updates-count'] = '%s ... %d Updates werden angewendet',\n        ['no-setup'] = 'Um die Integration zu starten, bitte die Variablen URL, Benutzername und Passwort angeben',\n        ['used-url'] = 'Gardena-Smart-Proxy-Adresse: %s',\n        ['error-updates'] = '[%d] Updates konnten nicht abgerufen werden: %s',\n        ['error-search'] = '[%d] Geräte konnten nicht gesucht werden: %s',\n    }\n}"
        },
        {
            "name": "Gardena",
            "isMain": false,
            "isOpen": false,
            "content": "--[[\nNetatmo SDK\n@author ikubicki\n]]\nclass 'Gardena'\n\nfunction Gardena:new(config)\n    self.config = config\n    self.locationId = config:getLocationId()\n    self.basicAuthorization = base64:enc(self.config:getUsername() .. ':' .. self.config:getPassword())\n    self.http = HTTPClient:new({\n        baseUrl = self.config:getUrl()\n    })\n    return self\nend\n\nfunction Gardena:getLocations(callback, fallback)\n\n    local buildLocation = function(data)\n        return {\n            id = data.id,\n            name = data.attributes.name\n        }\n    end\n    local fail = function(response)\n        QuickApp:error('Unable to pull locations')\n        QuickApp:debug(response.status)\n        QuickApp:debug(response.data)\n        if fallback ~= nil then\n            fallback(response)\n        end\n    end\n    local success = function(response)\n        if response.status > 299 then\n            fail(response)\n            return\n        end\n        local data = json.decode(response.data)\n        local locations = {}\n        for _, l in  ipairs(data.data) do\n            if l.type == \"LOCATION\" then\n                table.insert(locations, buildLocation(l))\n            end\n        end\n        if callback ~= nil then\n            callback(locations)\n        end\n    end\n    local headers = {\n        Authorization = \"Basic \" .. self.basicAuthorization\n    }\n    self.http:get('/proxy/locations', success, fail, headers)\nend\n\nfunction Gardena:getDevices(locationId, callback, fallback)\n    local buildValve = function(data, collection)\n        local valve = {\n            id = data.id,\n            type = \"Valve\",\n            name = data.attributes.name.value,\n            value = data.attributes.activity.value,\n            state = data.attributes.state.value,\n        }\n        for _, d in ipairs(collection) do\n            if d.type == \"COMMON\" and d.id == data.relationships.device.data.id then\n                valve.model = d.attributes.modelType.value\n                if d.attributes.rfLinkState.value ~= \"ONLINE\" then\n                    valve.state = d.attributes.rfLinkState.value\n                end\n            end\n        end\n        return valve\n    end\n    local buildHumiditySensor = function(data, collection)\n        local sensor = {\n            id = data.id,\n            type = \"SoilHumidity\",\n            model = nil,\n            name = nil,\n            value = data.attributes.soilHumidity.value,\n            state = nil,\n            battery = 100,\n        }\n        for _, d in ipairs(collection) do\n            if d.type == \"COMMON\" and d.id == sensor.id then\n                sensor.name = d.attributes.name.value\n                sensor.battery = d.attributes.batteryLevel.value\n                sensor.state = d.attributes.rfLinkState.value\n                sensor.model = d.attributes.modelType.value\n            end\n        end\n        return sensor\n    end\n    local buildTemperatureSensor = function(data, collection)\n        local sensor = {\n            id = data.id,\n            type = \"SoilTemperature\",\n            model = nil,\n            name = nil,\n            value = data.attributes.soilTemperature.value,\n            state = nil,\n            battery = 100,\n        }\n        for _, d in ipairs(collection) do\n            if d.type == \"COMMON\" and d.id == sensor.id then\n                sensor.name = d.attributes.name.value\n                sensor.battery = d.attributes.batteryLevel.value\n                sensor.state = d.attributes.rfLinkState.value\n                sensor.model = d.attributes.modelType.value\n            end\n        end\n        return sensor\n    end\n    local fail = function(response)\n        QuickApp:error('Unable to pull devices')\n        if fallback ~= nil then\n            fallback(response)\n        end\n    end\n    local success = function(response)\n        if response.status > 299 then\n            fail(response)\n            return\n        end\n        local data = json.decode(response.data)\n        local devices = {}\n        for _, d in  ipairs(data.included) do\n            if d.type == \"VALVE\" then\n                table.insert(devices, buildValve(d, data.included))\n            end\n            if d.type == \"SENSOR\" then\n                table.insert(devices, buildHumiditySensor(d, data.included))\n                table.insert(devices, buildTemperatureSensor(d, data.included))\n            end\n        end\n        if callback ~= nil then\n            callback(devices)\n        end\n    end\n    if locationId == \"\" then\n        fail({\n            error = \"Location ID is missing\",\n            status = 400\n        })\n        return \n    end\n    local headers = {\n        Authorization = \"Basic \" .. self.basicAuthorization\n    }\n    self.http:get('/proxy/locations/' .. locationId, success, fail, headers)\nend\n\nfunction Gardena:getUpdates(lastUpdateAt, callback, fallback)\n    local fail = function(response)\n        QuickApp:error('Unable to pull devices')\n        if fallback ~= nil then\n            fallback(response)\n        end\n    end\n    local success = function(response)\n        if response.status > 299 then\n            fail(response)\n            return\n        end\n        local data = json.decode(response.data)\n        local devices = {}\n        for _, d in ipairs(data) do\n            if d.type == \"Valve\" then\n                table.insert(devices, {\n                    id = d.id,\n                    type = \"Valve\",\n                    name = d.name,\n                    value = d.activity,\n                    state = d.state,\n                    timestamp = d.timestamp,\n                })\n            end\n            if d.type == \"Sensor\" then\n                table.insert(devices, {\n                    id = d.id,\n                    type = \"SoilHumidity\",\n                    value = d.humidity,\n                    state = d.rfLinkState,\n                    timestamp = d.timestamp,\n                    battery = d.batteryLevel,\n                })\n                table.insert(devices, {\n                    id = d.id,\n                    type = \"SoilTemperature\",\n                    value = d.temperature,\n                    state = d.rfLinkState,\n                    timestamp = d.timestamp,\n                    battery = d.batteryLevel,\n                })\n            end\n        end\n        if callback ~= nil then\n            callback(devices)\n        end\n    end\n    local headers = {\n        Authorization = \"Basic \" .. self.basicAuthorization\n    }\n    self.http:get('/devices?from=' .. lastUpdateAt, success, fail, headers)\nend\n\nfunction Gardena:updateWebhook(locationId, callback, fallback)\n    local fail = function(response)\n        QuickApp:error('Unable to update the webhook')\n        if fallback ~= nil then\n            fallback(response)\n        end\n    end\n    local success = function(response)\n        if response.status > 299 then\n            fail(response)\n            return\n        end\n        local data = json.decode(response.data)\n        if callback ~= nil then\n            callback({\n                hmacSecret = data.data.attributes.hmacSecret,\n                validUntil = data.data.attributes.validUntil,\n            })\n        end\n    end\n    local headers = {\n        Authorization = \"Basic \" .. self.basicAuthorization,\n        ['User-Agent'] = 'fibaro quick app',\n        ['Content-Type'] = 'application/json',\n    }\n    local data = {\n        data = {\n            id = \"fibaroQA\",\n            attributes = {\n                url = self.config:getUrl() .. '/callbacks',\n                locationId = locationId,\n            }\n        }\n    }\n    self.http:post('/proxy/webhook', data, success, fail, headers)\nend\n\nfunction Gardena:sendCommand(command, callback, fallback)\n    local data = self:getCommandPayload(command)\n    local headers = {\n        Authorization = \"Basic \" .. self.basicAuthorization,\n        ['User-Agent'] = 'fibaro quick app',\n        ['Content-Type'] = 'application/json',\n    }\n    self.http:put('/proxy/command/' .. command.device, data, callback, fail, headers)\nend\n\nfunction Gardena:getCommandPayload(command)\n    local generators = {\n        VALVE_CONTROL = function(command)\n            local handlers = {\n                START_SECONDS_TO_OVERRIDE = function(command)\n                    return {\n                        id = \"fibaroQaValve\",\n                        type = command.type,\n                        attributes = {\n                            command = command.command,\n                            seconds = command.seconds,\n                        },\n                    }\n                end,\n                STOP_UNTIL_NEXT_TASK = function(command)\n                    return {\n                        id = 'fibaroQaValve',\n                        type = command.type,\n                        attributes = {\n                            command = command.command,\n                            seconds = 0,\n                        }\n                    }\n                end,\n            }\n            return handlers[command.command](command)\n        end,\n    }\n    return {\n        data = generators[command.type](command)\n    }\nend"
        },
        {
            "name": "base64",
            "isMain": false,
            "isOpen": false,
            "content": "class 'base64'\n-- source: https://stackoverflow.com/questions/34618946/lua-base64-encode\nlocal b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfunction base64:enc(data)\n    return ((data:gsub('.', function(x) \n        local r,b='',x:byte()\n        for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end\n        return r;\n    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)\n        if (#x < 6) then return '' end\n        local c=0\n        for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end\n        return b:sub(c+1,c+1)\n    end)..({ '', '==', '=' })[#data%3+1])\nend"
        },
        {
            "name": "GardenaChildDevice",
            "isMain": false,
            "isOpen": false,
            "content": "class 'GardenaChildDevice' (QuickAppChild)\n\nGardenaChildDevice.class = 'com.fibaro.multilevelSensor'\n\nfunction GardenaChildDevice:__init(device)\n    self.device = false\n    QuickAppChild.__init(self, device)\nend\n\nfunction GardenaChildDevice:create(name, label, class)\n    if not class then\n        class = self.class\n    end\n    local id = 'gardena-' .. name\n    local options = {\n        manufacturer = 'Gardena',\n        model = 'GARDENA smart device'\n    }\n    if label == nil then\n        label = id\n    end\n    self.device = QuickApp.builder:createChild(id, label, class, options, self.interfaces)\n    return self\nend\n\nfunction GardenaChildDevice:get(name, label, class)\n    if not class then\n        class = self.class\n    end\n    local id = 'gardena-' .. name\n    local options = {\n        manufacturer = 'Gardena',\n        model = 'GARDENA smart device'\n    }\n    if label == nil then\n        label = id\n    end\n    self.device = QuickApp.builder:updateChild(id, label, class, options, self.interfaces)\n    return self\nend\n\nfunction GardenaChildDevice:delete(name)\n    QuickApp.builder:deleteChild('gardena-' .. name)\nend\n\nfunction GardenaChildDevice:update(properties)\n    \n    if self.device == nil or not self.device then\n        return false\n    end\n    if type(properties) ~= 'table' then\n        properties = {\n            value = properties\n        }\n    end\n    for name, value in pairs(properties) do\n        self.device:updateProperty(name, value)\n    end\n    --  QuickApp:trace(string.format(QuickApp.i18n:get('device-updated'), self.device.name))\n    return true\nend\n"
        },
        {
            "name": "GardenaValve",
            "isMain": false,
            "isOpen": false,
            "content": "class 'GardenaValve' (GardenaChildDevice)\n\nGardenaValve.class = 'com.fibaro.sprinkler'\nGardenaValve.UNAVAILABLE = 'UNAVAILABLE'\nGardenaValve.CLOSED = 'CLOSED'\nGardenaValve.OK = 'OK'\nGardenaValve.interfaces = {\n    \"autoTurnOff\",\n    \"quickAppChild\",\n}\n\nfunction GardenaValve:__init(device)\n    QuickAppChild.__init(self, device)\n    self.gardenaId = string.gsub(self:getVariable(\"name\"), \"^gardena%-valve%-\", \"\")\nend\n\nfunction GardenaValve:forceWatering(event)\n    self:turnOn(event)\nend\n\nfunction GardenaValve:turnOn(event)\n    local callback = function(response) end\n    local fallback = function(response) end\n    local command = {\n        type = 'VALVE_CONTROL',\n        device = self.gardenaId,\n        command = 'START_SECONDS_TO_OVERRIDE',\n        seconds = 7200,\n    }\n    self.parent.client:sendCommand(command, callback, fallback)\nend\n\nfunction GardenaValve:turnOff(event)\n    local callback = function(response) end\n    local fallback = function(response) end\n    local command = {\n        type = 'VALVE_CONTROL',\n        device = self.gardenaId,\n        command = 'STOP_UNTIL_NEXT_TASK',\n    }\n    self.parent.client:sendCommand(command, callback, fallback)\nend\n"
        },
        {
            "name": "DeviceBuilder",
            "isMain": false,
            "isOpen": false,
            "content": "--[[\nDevice building utility\n@author ikubicki\n]]\n\nclass 'DeviceBuilder'\n\nfunction DeviceBuilder:new(parentDevice)\n    self.parentDevice = parentDevice\n    self.parentRoomId = api.get('/devices/' .. parentDevice.id).roomID\n    self.classMap = {}\n    self.devicesMap = {}\n    return self\nend\n\nfunction DeviceBuilder:initChildren(classMap)\n    self.classMap = classMap\n    self.parentDevice:initChildDevices(classMap)\n    for id, device in pairs(self.parentDevice.childDevices) do\n        local vars = {}\n        for _, var in pairs(device.properties.quickAppVariables) do\n            vars[var.name] = var.value\n        end\n        if vars.name then\n            self.devicesMap[vars.name] = device.id\n        end\n    end\nend\n\nfunction DeviceBuilder:updateChild(name, displayName, type, properties, interfaces)\n    local child = self:getChildByName(name)\n    if not child then\n        return false\n    end\n    if properties ~= nil then\n        api.put('/devices/' .. child.id, {\n            name = displayName, \n            properties = properties, \n            interfaces = interfaces\n        })\n        -- QuickApp:trace('Device updated: ' .. child.name .. ' [' .. child.id .. ']')\n    end\n    return child\nend\n\nfunction DeviceBuilder:getChildByName(name)\n--    QuickApp:debug(json.encode(self.devicesMap))\n    local id = self.devicesMap[name]\n    if id then\n        return self:getChild(id)\n    end\n    return nil\nend\n\nfunction DeviceBuilder:getChild(id)\n    return self.parentDevice.childDevices[id]\nend\n\nfunction DeviceBuilder:createChild(name, displayName, type, properties, interfaces)\n    local child = self:getChildByName(name)\n    if child ~= nil then\n        return false\n    end\n    local options = {\n        name = displayName,\n        type = type\n    }\n    local child = self.parentDevice:createChildDevice(options, self.classMap[type])\n    if properties == nil then\n        properties = {}\n    end\n    properties.quickAppVariables = {{\n        name = 'name',\n        value = name\n    }}\n    QuickApp:trace('New device added: ' .. child.name .. ' [' .. child.id .. ']')\n    api.put('/devices/' .. child.id, {\n        roomID = self.parentRoomId, \n        properties = properties, \n        interfaces = interfaces\n    })\n    self.devicesMap[name] = child.id\n    return self:getChild(child.id)\nend\n\nfunction DeviceBuilder:deleteChild(name)\n    local child = self:getChildByName(name)\n    if child ~= nil then\n        api.delete('/devices/' .. child.id)\n        QuickApp:trace('Device removed: ' .. child.name .. ' [' .. child.id .. ']')\n    end\nend\n"
        },
        {
            "name": "GardenaSoilTemperatu",
            "isMain": false,
            "isOpen": false,
            "content": "class 'GardenaSoilTemperature' (GardenaChildDevice)\n\nGardenaSoilTemperature.class = 'com.fibaro.temperatureSensor'\nGardenaSoilTemperature.ONLINE = 'ONLINE'\nGardenaSoilTemperature.interfaces = {\n    \"quickAppChild\", \n    \"battery\",\n}\n\nfunction GardenaSoilTemperature:__init(device)\n    QuickAppChild.__init(self, device)\nend\n"
        },
        {
            "name": "GardenaSoilHumidity",
            "isMain": false,
            "isOpen": false,
            "content": "class 'GardenaSoilHumidity' (GardenaChildDevice)\n\nGardenaSoilHumidity.class = 'com.fibaro.humiditySensor'\nGardenaSoilHumidity.ONLINE = 'ONLINE'\nGardenaSoilHumidity.interfaces = {\n    \"quickAppChild\", \n    \"battery\",\n}\n\nfunction GardenaSoilHumidity:__init(device)\n    QuickAppChild.__init(self, device)\nend"
        }
    ]
}